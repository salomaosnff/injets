import"reflect-metadata";import{Container as a,ProviderMode as v,tokenName as P}from"@injets/core";import{delayed as S,Token as $,Container as N}from"@injets/core";var d=Symbol("mounted"),f=Symbol("provider"),i=Symbol("provider.injects.params"),u=Symbol("options");function O(n={}){return e=>{Reflect.defineProperty(e,u,{value:n}),n.global&&a.global.import(m(e).container)}}function j(n=v.SINGLETON){return e=>{let r={token:e,useFactory:(...o)=>{let t=Reflect.get(e,i)??[],{properties:s,params:y}=o.reduce((p,l,M)=>{let c=t[M];return c&&(c.key!==void 0&&(p.properties[c.key]=l),c.index!==void 0&&p.params.push(l)),p},{properties:{},params:[]});return Object.assign(new e(...y),s)},mode:n,inject:(Reflect.get(e,i)??[]).map(({token:o})=>o)};Reflect.defineProperty(e,f,{value:r})}}function C(n){return(e,r,o)=>{if(n??(n=o!==void 0?Reflect.getMetadata("design:paramtypes",e)[o]:Reflect.getMetadata("design:type",e,r)),!n)throw new Error(`Missing token for ${P(e.constructor)}#${String(r)}`);let t={token:n},s=Reflect.get(e,i)??[];s.push(t),o!==void 0&&(t.index=o,Reflect.set(e,i,s)),r!==void 0&&(t.key=r,Reflect.set(e.constructor,i,s))}}function m(n){if(d in n)return Reflect.get(n,d);if(!(u in n))throw new Error(`Missing @Module decorator on ${n.name}`);let e=n[u],r=new a({name:n.name,defaultExport:!1,providers:(e.providers??[]).map(o=>{let t=Reflect.get(o,f);if(!t)throw new Error(`Missing @Provider decorator on ${n.name}`);return t}),imports:(e.imports??[]).map(o=>m(o).container)});for(let o of e.exports??[])r.export(o);return Reflect.defineProperty(n,d,{value:{container:r,resolve:(o,t=!0)=>r.resolve(o,t)}}),Reflect.get(n,d)}export{N as Container,C as Inject,O as Module,j as Provider,$ as Token,S as delayed,m as mount};
//# sourceMappingURL=index.js.map