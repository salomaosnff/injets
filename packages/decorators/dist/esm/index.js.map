{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import 'reflect-metadata';\nimport { Class, Container, DependencyValues, Provider as ProviderOptions, ProviderMode, Token, tokenName } from '@injets/core';\n\nexport {\n  delayed, Token, Container,\n} from '@injets/core';\n\nconst $MOUNTED = Symbol('mounted');\nconst $PROVIDER = Symbol('provider');\nconst $INJECTS = Symbol('provider.injects.params');\nconst $OPTIONS = Symbol('options');\n\ninterface InjectProperty {\n  key?: string | symbol;\n  token: Token;\n  index?: number;\n}\n\nexport interface ModuleOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  imports?: Class<any>[];\n  providers?: Array<Class<unknown> | ProviderOptions>;\n  exports?: Class<unknown>[];\n  global?: boolean;\n}\n\nexport interface MountedModule {\n  container: Container;\n\n  resolve<const T extends Token[]>(...tokens: T): DependencyValues<T>;\n}\n\nexport function Module(options: ModuleOptions = {}) {\n  return (target: Class<unknown>) => {\n    Reflect.defineProperty(target, $OPTIONS, { value: options });\n\n    if (options.global) {\n      Container.global.import(mount(target).container);\n    }\n  };\n}\n\nexport function Provider(\n  mode = ProviderMode.SINGLETON,\n): ClassDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (target: any) => {\n    const options: ProviderOptions = {\n      token: target,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      useFactory: (...deps: any[]) => {\n        const injects = Reflect.get(target, $INJECTS) as InjectProperty[] ?? [];\n        const {\n          properties, params,\n        } = deps.reduce((acc, dep, index) => {          \n          const item = injects[index];\n\n          if (!item) {\n            return acc;\n          }\n\n          if (item.key !== undefined) {\n            acc.properties[item.key] = dep;\n          }\n\n          if (item.index !== undefined) {\n            acc.params.push(dep);\n          }\n\n          return acc;\n        }, {\n          properties: {} as Record<string, unknown>,\n          params: [] as unknown[],\n        });\n\n        return Object.assign(new target(...params), properties);\n      },\n      mode,\n      inject: ((Reflect.get(target, $INJECTS) ?? []) as InjectProperty[]).map(({ token }) => token),\n    };\n\n    Reflect.defineProperty(target, $PROVIDER, { value: options });\n  };\n}\n\nexport function Inject(token?: Token): any {\n  return (target: object, key: string | symbol, index: number) => {\n    token ??= index !== undefined ? Reflect.getMetadata('design:paramtypes', target)[index] : Reflect.getMetadata('design:type', target, key!);\n\n    if (!token) {\n      throw new Error(`Missing token for ${tokenName(target.constructor)}#${String(key)}`);\n    }\n\n    const item: InjectProperty = { token };\n\n    const injects = Reflect.get(target, $INJECTS) as InjectProperty[] ?? [];\n    \n    injects.push(item);\n\n    if (index !== undefined) {\n      item.index = index;\n      Reflect.set(target, $INJECTS, injects);\n    }\n\n    if (key !== undefined) {\n      item.key = key;\n      Reflect.set(target.constructor, $INJECTS, injects);\n    }\n  };\n}\n\nexport function mount<T extends Class<unknown>>(target: T): MountedModule {\n  if ($MOUNTED in target) {\n    return Reflect.get(target, $MOUNTED) as MountedModule;\n  }\n\n  if (!($OPTIONS in target)) {\n    throw new Error(`Missing @Module decorator on ${target.name}`);\n  }\n\n  const options = target[$OPTIONS] as ModuleOptions;\n\n  const container = new Container({\n    name: target.name,\n    defaultExport: false,\n    providers: (options.providers ?? []).map((provider) => {\n      const options = Reflect.get(provider, $PROVIDER) as ProviderOptions;\n\n      if (!options) {\n        throw new Error(`Missing @Provider decorator on ${target.name}`);\n      }\n\n      return options;\n    }),\n    imports: (options.imports ?? []).map((imported) => mount(imported).container),\n  });\n\n  for (const exported of options.exports ?? []) {\n    container.export(exported);\n  }\n\n  Reflect.defineProperty(target, $MOUNTED, {\n    value: {\n      container,\n      resolve: <const T extends Token[]>(tokens: T, includePrivate = true) => container.resolve(tokens, includePrivate),\n    },\n  });\n\n  return Reflect.get(target, $MOUNTED) as MountedModule;\n}\n"],"mappings":"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","names":["Container","ProviderMode","tokenName","delayed","Token","$MOUNTED","$PROVIDER","$INJECTS","$OPTIONS","Module","options","target","mount","Provider","mode","deps","injects","properties","params","acc","dep","index","item","token","Inject","key","container","provider","imported","exported","tokens","includePrivate"]}