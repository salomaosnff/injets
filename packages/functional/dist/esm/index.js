import{Container as T,ProviderMode as s}from"@injets/core";import{delayed as P,Token as V,Container as g}from"@injets/core";function l(t){let e=new T({name:t});function r(...n){for(let o of n){if(o instanceof T){e.import(o);continue}if(typeof o=="function"&&o.container instanceof T){e.import(o.container);continue}throw new TypeError("Invalid container or resolver.")}}function c(n){e.provide(n)}function a(n,o,i=!0){e.provide({token:n,mode:s.SINGLETON,useFactory:o,export:i})}function d(n,o,i=!0){e.provide({token:n,useValue:o,export:i})}function v(n,o,i=!0){e.provide({token:n,useFactory:o,mode:s.TRANSIENT,export:i})}function u(n){return e.resolve(n)}return{inject:u,depends:r,provide:c,singleton:a,constant:d,transient:v,container:e}}function x(t){let e=(...r)=>t.resolve(r);return e.container=t,e}function C(t,e){let r=l(t);return e(r),x(r.container)}export{g as Container,V as Token,C as createResolver,x as createResolverForContainer,P as delayed};
//# sourceMappingURL=index.js.map